#!/usr/bin/env bash

# --------------------------------------------------------------------------------
# check required
# --------------------------------------------------------------------------------
declare -a requireds=(
  git
  fzf
)

for required in "${requireds[@]}"; do
  if ! type "$required" >/dev/null 2>&1; then
    echo "$required not found. it is required to work"
    exit 1
  fi
done

# --------------------------------------------------------------------------------
# load scripts
# --------------------------------------------------------------------------------

script_source="${BASH_SOURCE:-$0}"
script_dir="$(cd "$(dirname "$script_source")" >/dev/null 2>&1 && pwd)"

while IFS= read -r -d "" file; do
  # shellcheck disable=1090
  . "${file}"
done < <(find "$script_dir" -name "*.sh" -type f -print0)

# --------------------------------------------------------------------------------
# core modules
# --------------------------------------------------------------------------------
fit::is-inside-work-tree() {
  git rev-parse --is-inside-work-tree >/dev/null
}

# --------------------------------------------------------------------------------
# run fit
# --------------------------------------------------------------------------------

# quotes mult-word parameters in order to make a command copy-paste with ease
quote-single-param() {
  if [ -z "$1" ] || [[ "$1" = *' '* ]]; then
    if [[ "$1" = *"'"* ]]; then
      echo "\"$1\""
    else
      echo "'$1'"
    fi
  else
    echo "$1"
  fi
}

# quotes a list of params using `"$@"`
# MISSING: support for anything escapable (`\n`, `\t`, etc.?)
# MISSING: support quotes in params (e.g. quoting `'a' "b'd"`)
quote-params() {
  local rest=""
  for arg in "$@"; do
    if [ -z "$rest" ]; then
      printf "%s" "$(quote-single-param "$arg")"
      rest=true
    else
      printf " %s" "$(quote-single-param "$arg")"
    fi
  done
}

fit-info() {
  echo "info" "$@"
}

fit-hoge() {
  echo "hoge" "$@"
}

fit-fuga() {
  echo "fuga" "$@"
}

fit() {
  # work tree にいないときは終了
  fit::is-inside-work-tree || return 1

  local func_name
  func_name="$1"

  if [ "$#" = '0' ]; then # 引数なしの時は info
    func_name="info"
  else
    shift
  fi

  local params func
  params="$(quote-params "$@")"
  func="fit::${func_name}"

  if type "$func" >/dev/null 2>&1; then
    eval "$func $params"
  else
    echo "\`$func_name\` not found"
  fi
}

# --------------------------------------------------------------------------------
# tig
# --------------------------------------------------------------------------------
# m view-main           Show main view
# d view-diff           Show diff view
# l view-log            Show log view
# t view-tree           Show tree view
# f view-blob           Show blob view
# b view-blame          Show blame view
# r view-refs           Show refs view
# s view-status         Show status view
# c view-stage          Show stage view
# y view-stash          Show stash view
# g view-grep           Show grep view
# p view-pager          Show pager view
# h view-help           Show help view

# --------------------------------------------------------------------------------
# tortoise git
# --------------------------------------------------------------------------------
# log
# commit
# diff
# revert
# refs
# branches
