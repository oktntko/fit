#!/usr/bin/env bash

return 1 2>/dev/null || true # catch > source or .

# --------------------------------------------------------------------------------
# check required
# --------------------------------------------------------------------------------
declare -a requireds=(
  git
  fzf
)

for required in "${requireds[@]}"; do
  if ! type "$required" >/dev/null 2>&1; then
    echo "$required not found. it is required to work"
    exit 1
  fi
done

# --------------------------------------------------------------------------------
# load scripts
# --------------------------------------------------------------------------------

script_dir="$(cd "$(dirname "$(readlink "$0" || echo "$0")")" >/dev/null 2>&1 && pwd)"

while IFS= read -r -d "" file; do
  # shellcheck disable=1090
  . "${file}"
done < <(find "$script_dir" -name "*.sh" -type f -print0)

# --------------------------------------------------------------------------------
# run fit
# --------------------------------------------------------------------------------

fit() {
  # work tree にいないときは終了
  fit::utils::is-inside-work-tree || return 1

  local func_name
  func_name="$1"

  if [ "$#" = '0' ]; then # 引数なしの時は help
    func_name="help"
  else
    shift
  fi

  local params func
  params="$(fit::utils::quote-params "$@")"
  func="fit::${func_name}"

  if type "$func" >/dev/null 2>&1; then
    eval "$func $params"
  else
    git $func_name "$@"
  fi
}

fit "$@"
